{"version":3,"sources":["Treemap.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["Treemap","_ref","data","width","height","svgRef","useRef","fontSize","legendRef","wrapText","selection","each","word","node","d3","this","rectWidth","attr","words","text","split","reverse","line","x","y","tspan","append","lineNumber","length","pop","push","join","getComputedTextLength","addTspan","concat","useEffect","svg","current","legendContainer","selectAll","remove","root","sum","d","value","sort","a","b","treemapRoot","size","padding","nodes","leaves","x0","y0","colorScale","map","color","x1","y1","category","name","call","console","log","categories","filter","index","self","indexOf","legend","_","i","style","React","createElement","ref","renderTreemap","children","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3fd7f08c.chunk.js","sourcesContent":["import React  from 'react';\r\nimport { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default function Treemap({ data, width, height }) {\r\n  const svgRef = useRef(null);\r\n  const fontSize = 12;\r\n  const legendRef = useRef(null);\r\n\r\n  function wrapText(selection) {\r\n    selection.each(function () {\r\n      const node = d3.select(this);\r\n      const rectWidth = +node.attr('data-width');\r\n      let word;\r\n      const words = node.text().split(' ').reverse();\r\n      let line = [];\r\n      const x = node.attr('x');\r\n      const y = node.attr('y');\r\n      let tspan = node.text('').append('tspan').attr('x', x).attr('y', y);\r\n      let lineNumber = 0;\r\n      while (words.length > 1) {\r\n        word = words.pop();\r\n        line.push(word);\r\n        tspan.text(line.join(' '));\r\n        const tspanLength = tspan.node().getComputedTextLength();\r\n        if (tspanLength > rectWidth && line.length !== 1) {\r\n          line.pop();\r\n          tspan.text(line.join(' '));\r\n          line = [word];\r\n          tspan = addTspan(word);\r\n        }\r\n      }\r\n      \r\n      addTspan(words.pop());\r\n  \r\n      function addTspan(text) {\r\n        lineNumber += 1;\r\n        return (\r\n          node\r\n            .append('tspan')\r\n            .attr('x', x)\r\n            .attr('y', y)\r\n            .attr('dy', `${lineNumber * fontSize}px`)\r\n            .text(text)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderTreemap() {\r\n\r\n    // +++++++++++++++++++++++++++++++++\r\n    // cleanup nodes if left over from previous render\r\n    //\r\n    const svg = d3.select(svgRef.current);\r\n    var legendContainer = d3.select(legendRef.current);\r\n\r\n    svg.selectAll('g').remove();\r\n  \r\n    legendContainer = d3.select(legendRef.current);\r\n    legendContainer.selectAll('g').remove();\r\n    // +++++++++++++++++++++++++++++++++\r\n \r\n\r\n    svg.attr('width', width).attr('height', height);\r\n\r\n    const root = d3\r\n      .hierarchy(data)\r\n      .sum((d) => d.value)\r\n      .sort((a, b) => b.value - a.value);\r\n\r\n    const treemapRoot = d3.treemap().size([width, height]).padding(1)(root);\r\n\r\n    // on to the nodes...\r\n    // --------------------------------------\r\n    const nodes = svg\r\n      .selectAll('g')\r\n      .data(treemapRoot.leaves())\r\n      .join('g')\r\n      .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n    const fader = (color) => d3.interpolateRgb(color, '#fff')(0.3);\r\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10.map(fader));\r\n\r\n    // const fontSize = 12;\r\n\r\n    nodes\r\n      .append('rect')\r\n      .attr('width', (d) => d.x1 - d.x0)\r\n      .attr('height', (d) => d.y1 - d.y0)\r\n      .attr('fill', (d) => colorScale(d.data.category));\r\n      // ---------------------------------\r\n\r\n   \r\n  \r\n    nodes\r\n      .append('text')\r\n      .text((d) => `${d.data.name} ${d.data.value}`)\r\n      .attr('data-width', (d) => d.x1 - d.x0)\r\n      .attr('font-size', `${fontSize}px`)\r\n      .attr('x', 3)\r\n      .attr('y', fontSize)\r\n      .call(wrapText);\r\n  \r\n    console.log(treemapRoot.leaves())\r\n\r\n    // -----------------------------------------------\r\n    // legend code (we may not want to use legends at ISeaTree)\r\n    //\r\n    legendContainer = d3.select(legendRef.current);\r\n\r\n    let categories = root.leaves().map((node) => node.data.category);\r\n    \r\n    categories = categories.filter(\r\n      (category, index, self) => self.indexOf(category) === index,\r\n    );\r\n\r\n    legendContainer.attr('width', width).attr('height', height / 4);\r\n\r\n    const legend = legendContainer.selectAll('g').data(categories).join('g');\r\n\r\n    legend\r\n      .append('rect')\r\n      .attr('width', fontSize)\r\n      .attr('height', fontSize)\r\n      .attr('x', fontSize)\r\n      .attr('y', (_, i) => fontSize * 2 * i)\r\n      .attr('fill', (d) => colorScale(d));\r\n\r\n    legend\r\n      .append('text')\r\n      .attr('transform', `translate(0, ${fontSize})`)\r\n      .attr('x', fontSize * 3)\r\n      .attr('y', (_, i) => fontSize * 2 * i)\r\n      .style('font-size', fontSize)\r\n      .text((d) => d);\r\n\r\n      return (\r\n        <div>\r\n          <svg ref={svgRef} />\r\n          <svg ref={legendRef} />\r\n        </div>\r\n      );\r\n\r\n    // -----------------------------------------------\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    renderTreemap();\r\n  }, [data]);\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <svg ref={svgRef} />\r\n      <svg ref={legendRef} />\r\n    </div>\r\n  );\r\n}","const data = {\r\n    name: 'States',\r\n    children: [\r\n      {\r\n        name: 'Texas',\r\n        children: [\r\n          {\r\n            category: 'Texas',\r\n            name: 'Silver Maple',\r\n            value: 20.4,\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'ChinaBerry',\r\n            value: 12.9,\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Oak',\r\n            value: 6.9,\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Sugar Maple',\r\n            value: 3.6,\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Juniper',\r\n            value: 3.3,\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Trash',\r\n            value: 2.5,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'Oregon',\r\n        children: [\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Pine',\r\n            value: 23.4,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Laurel',\r\n            value: 20.3,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Mountain Laurel',\r\n            value: 17.5,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Juniper',\r\n            value: 6.4,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Family',\r\n            value: 7.4,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Shoe',\r\n            value: 3.4,\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Coconut',\r\n            value: 12.9,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'Hawaii',\r\n        children: [\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Coconut',\r\n            value: 9.2,\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Willow',\r\n            value: 8.1,\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Redwood',\r\n            value: 5.2,\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'White Oak',\r\n            value: 3.3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n  \r\n  export default data;\r\n","import React  from 'react';\n// import logo from './logo.svg';\nimport Treemap from './Treemap';\nimport data from './data';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Treemap data={data} height={400} width={600} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}