{"version":3,"sources":["Treemap.js","data.js","getdata3.js","App.js","reportWebVitals.js","index.js"],"names":["Treemap","_ref","data","width","height","svgRef","useRef","fontSize","legendRef","wrapText","selection","each","word","node","d3","this","rectWidth","attr","words","text","split","reverse","line","x","y","tspan","append","lineNumber","length","pop","push","join","getComputedTextLength","addTspan","concat","useEffect","svg","current","legendContainer","selectAll","remove","root","sum","d","value","sort","a","b","treemapRoot","size","padding","nodes","leaves","x0","y0","colorScale","map","color","x1","y1","category","name","call","console","log","categories","filter","index","self","indexOf","legend","_","i","style","React","createElement","ref","renderTreemap","children","name_state","children_state","AddTree2","mystates","st","spec_c","spec_s","treetype","treedict","treedict2","Object","assign","n","sti","trees","treedict3","m","j","treedict4","mm","treedict5","getdata","fileInfo","stateabbr","species_c","speciesnamecommon","speciesnamescientific","all","ReactDOM","createRoot","document","getElementById","render","StrictMode","papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","App","className","src","CSVReader","cssClass","label","onFileLoaded","parserOptions","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"kNAIe,SAASA,EAAOC,GAA0B,IAAvBC,EAAID,EAAJC,KAAMC,EAAKF,EAALE,MAAOC,EAAMH,EAANG,OACvCC,EAASC,iBAAO,MAChBC,EAAW,GACXC,EAAYF,iBAAO,MAEzB,SAASG,EAASC,GAChBA,EAAUC,KAAK,WAUb,IATA,IAEIC,EAFEC,EAAOC,IAAUC,MACjBC,GAAaH,EAAKI,KAAK,cAEvBC,EAAQL,EAAKM,OAAOC,MAAM,KAAKC,UACjCC,EAAO,GACLC,EAAIV,EAAKI,KAAK,KACdO,EAAIX,EAAKI,KAAK,KAChBQ,EAAQZ,EAAKM,KAAK,IAAIO,OAAO,SAAST,KAAK,IAAKM,GAAGN,KAAK,IAAKO,GAC7DG,EAAa,EACVT,EAAMU,OAAS,GAAG,CACvBhB,EAAOM,EAAMW,MACbP,EAAKQ,KAAKlB,GACVa,EAAMN,KAAKG,EAAKS,KAAK,MACDN,EAAMZ,OAAOmB,wBACfhB,GAA6B,IAAhBM,EAAKM,SAClCN,EAAKO,MACLJ,EAAMN,KAAKG,EAAKS,KAAK,MACrBT,EAAO,CAACV,GACRa,EAAQQ,EAASrB,IAMrB,SAASqB,EAASd,GAEhB,OADAQ,GAAc,EAEZd,EACGa,OAAO,SACPT,KAAK,IAAKM,GACVN,KAAK,IAAKO,GACVP,KAAK,KAAI,GAAAiB,OAAKP,EAAapB,EAAQ,OACnCY,KAAKA,GAVZc,EAASf,EAAMW,SAwHnB,OALAM,oBAAU,YAnGV,WAKE,IAAMC,EAAMtB,IAAUT,EAAOgC,SACzBC,EAAkBxB,IAAUN,EAAU6B,SAE1CD,EAAIG,UAAU,KAAKC,UAEnBF,EAAkBxB,IAAUN,EAAU6B,UACtBE,UAAU,KAAKC,SAI/BJ,EAAInB,KAAK,QAASd,GAAOc,KAAK,SAAUb,GAExC,IAAMqC,EAAO3B,IACAZ,GACVwC,IAAI,SAACC,GAAC,OAAKA,EAAEC,QACbC,KAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEH,MAAQE,EAAEF,QAExBI,EAAclC,MAAamC,KAAK,CAAC9C,EAAOC,IAAS8C,QAAQ,EAA3CpC,CAA8C2B,GAI5DU,EAAQf,EACXG,UAAU,KACVrC,KAAK8C,EAAYI,UACjBrB,KAAK,KACLd,KAAK,YAAa,SAAC0B,GAAC,mBAAAT,OAAkBS,EAAEU,GAAE,KAAAnB,OAAIS,EAAEW,GAAE,OAG/CC,EAAazC,IAAgBA,IAAoB0C,IADzC,SAACC,GAAK,OAAK3C,IAAkB2C,EAAO,OAAzB3C,CAAiC,OAK1DqC,EACGzB,OAAO,QACPT,KAAK,QAAS,SAAC0B,GAAC,OAAKA,EAAEe,GAAKf,EAAEU,KAC9BpC,KAAK,SAAU,SAAC0B,GAAC,OAAKA,EAAEgB,GAAKhB,EAAEW,KAC/BrC,KAAK,OAAQ,SAAC0B,GAAC,OAAKY,EAAWZ,EAAEzC,KAAK0D,YAKzCT,EACGzB,OAAO,QACPP,KAAK,SAACwB,GAAC,SAAAT,OAAQS,EAAEzC,KAAK2D,KAAI,KAAA3B,OAAIS,EAAEzC,KAAK0C,SACrC3B,KAAK,aAAc,SAAC0B,GAAC,OAAKA,EAAEe,GAAKf,EAAEU,KACnCpC,KAAK,YAAW,GAAAiB,OAAK3B,EAAQ,OAC7BU,KAAK,IAAK,GACVA,KAAK,IAAKV,GACVuD,KAAKrD,GAERsD,QAAQC,IAAIhB,EAAYI,UAKxBd,EAAkBxB,IAAUN,EAAU6B,SAEtC,IAAI4B,EAAaxB,EAAKW,SAASI,IAAI,SAAC3C,GAAI,OAAKA,EAAKX,KAAK0D,WAEvDK,EAAaA,EAAWC,OACtB,SAACN,EAAUO,EAAOC,GAAI,OAAKA,EAAKC,QAAQT,KAAcO,IAGxD7B,EAAgBrB,KAAK,QAASd,GAAOc,KAAK,SAAUb,EAAS,GAE7D,IAAMkE,EAAShC,EAAgBC,UAAU,KAAKrC,KAAK+D,GAAYlC,KAAK,KAEpEuC,EACG5C,OAAO,QACPT,KAAK,QAASV,GACdU,KAAK,SAAUV,GACfU,KAAK,IAAKV,GACVU,KAAK,IAAK,SAACsD,EAAGC,GAAC,OAAgB,EAAXjE,EAAeiE,IACnCvD,KAAK,OAAQ,SAAC0B,GAAC,OAAKY,EAAWZ,KAElC2B,EACG5C,OAAO,QACPT,KAAK,YAAW,gBAAAiB,OAAkB3B,EAAQ,MAC1CU,KAAK,IAAgB,EAAXV,GACVU,KAAK,IAAK,SAACsD,EAAGC,GAAC,OAAgB,EAAXjE,EAAeiE,IACnCC,MAAM,YAAalE,GACnBY,KAAK,SAACwB,GAAC,OAAKA,IAGX+B,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,IAAKvE,IACVqE,IAAAC,cAAA,OAAKC,IAAKpE,KAShBqE,IACC,CAAC3E,IAIFwE,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,IAAKvE,IACVqE,IAAAC,cAAA,OAAKC,IAAKpE,KC5JhB,IA0GiBN,EA1GJ,CACT2D,KAAM,SACNiB,SAAU,CACR,CACEjB,KAAM,QACNiB,SAAU,CACR,CACElB,SAAU,QACVC,KAAM,eACNjB,MAAO,MAET,CACEgB,SAAU,QACVC,KAAM,aACNjB,MAAO,MAET,CACEgB,SAAU,QACVC,KAAM,MACNjB,MAAO,KAET,CACEgB,SAAU,QACVC,KAAM,cACNjB,MAAO,KAET,CACEgB,SAAU,QACVC,KAAM,UACNjB,MAAO,KAET,CACEgB,SAAU,QACVC,KAAM,QACNjB,MAAO,OAIb,CACEiB,KAAM,SACNiB,SAAU,CACR,CACElB,SAAU,SACVC,KAAM,OACNjB,MAAO,MAET,CACEgB,SAAU,SACVC,KAAM,SACNjB,MAAO,MAET,CACEgB,SAAU,SACVC,KAAM,kBACNjB,MAAO,MAET,CACEgB,SAAU,SACVC,KAAM,UACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,SACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,OACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,UACNjB,MAAO,QAIb,CACEiB,KAAM,SACNiB,SAAU,CACR,CACElB,SAAU,SACVC,KAAM,UACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,SACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,UACNjB,MAAO,KAET,CACEgB,SAAU,SACVC,KAAM,YACNjB,MAAO,2CCnFbmC,EAAa,OACbC,EAAiB,WAQvB,SAASC,EAASC,EAAUC,EAAIC,EAAQC,EAAQC,GAM9C,GAAW,OAAPH,EACF,OAAO,EAMT,IAAII,EAAW,CACb3B,SAAYuB,EACZtB,KAAQuB,EAGRxC,MAAU,GAYZ,GAAwB,IAApBsC,EAAStD,OAAa,CAGxBsD,EAASpD,KAAK,IACboD,EAAS,GAAIH,GAAcI,EAC3BD,EAAS,GAAIF,GAAkB,GAChC,IAAIQ,EAAY,GAGhB,OAFAC,OAAOC,OAAOF,EAAWD,GACxBL,EAAS,GAAIF,GAAgBlD,KAAK0D,IAC5B,EAQT,IANA,IAAMG,EAAIT,EAAStD,OAMV4C,EAAE,EAAGA,EAAImB,EAAGnB,IAAK,CACxB,IAAIoB,EAAOV,EAASV,GAAIO,GACxB,GAAW,MAAPa,GACEA,IAAQT,EAAG,CAGb,IAAIU,EAAQX,EAASV,GAAGQ,GACxB,GAAc,OAAVa,GAAmC,IAAjBA,EAAMjE,OAC5B,CAIEsD,EAASV,GAAGQ,GAAkB,GAC9B,IAAIc,EAAY,GAOhB,OAFAL,OAAOC,OAAOI,EAAWP,GACzBL,EAASV,GAAGQ,GAAgBlD,KAAKgE,IAC1B,EAMT,IADA,IAAIC,GADJF,EAAQX,EAASV,GAAGQ,IACNpD,OACLoE,EAAI,EAAGA,EAAID,EAAGC,IAAI,CAEzB,GAAa,MADDH,EAAMG,IACGH,EAAMG,GAAS,OAAMZ,EAGxC,OADAS,EAAMG,GAAU,MAAIH,EAAMG,GAAU,MAAI,GACjC,EAKyB,OAAhCd,EAASV,GAAGQ,KACdE,EAASV,GAAGQ,GAAkB,IAEhC,IAAIiB,EAAY,GAGhB,OAFAR,OAAOC,OAAOO,EAAWV,GACzBL,EAASV,GAAGQ,GAAgBlD,KAAKmE,IAC1B,GAObf,EAASpD,KAAK,IACd,IAAIoE,EAAKhB,EAAStD,OAClBsD,EAASgB,EAAG,GAAGnB,GAAcI,EAC7BD,EAASgB,EAAG,GAAGlB,GAAkB,GACjC,IAAImB,EAAY,GAGhB,OAFAV,OAAOC,OAAOS,EAAWZ,GACzBL,EAASgB,EAAG,GAAGlB,GAAgBlD,KAAKqE,IAC7B,EAKT,IAoEeC,EApEC,SAAClG,EAAMmG,GAIrB,IAHA,IAEInB,EAAW,GACLV,EAAI,EAAGA,EAAItE,EAAK0B,OAAQ4C,IAAM,CACtC,IAAIW,EAAKjF,EAAKsE,GAAG8B,UACbC,EAAYrG,EAAKsE,GAAGgC,kBACRtG,EAAKsE,GAAGiC,sBACTvG,EAAKsE,GAAGc,SACvBL,EAASC,EAAUC,EAAIoB,GAEzBxC,QAAQC,IAVC,IAaT,IAAI0C,EAAM,CACVA,KAAgB,UA4BhB,OA3BAA,EAAgB,SAAIxB,EAEHwB,EAiBJC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrC,IAAAC,cAACD,IAAMsC,WAAU,KACftC,IAAAC,cAAC3E,EAAO,CAACE,KAAMwG,EAAKtG,OAAQ,IAAKD,MAAO,QAKrCuG,GCvKHO,EAAmB,CACvBC,QAAQ,EACRC,eAAe,EACfC,gBAAgB,EAChBC,gBAAiB,SAAAH,GAAM,OAAIA,EAAOI,cAAcC,QAAQ,MAAO,OA0BlDC,MAvBf,WAKE,OACE9C,IAAAC,cAAA,OAAK8C,UAAU,OACb/C,IAAAC,cAAA,UAAQ+C,IAAI,0BACZhD,IAAAC,cAACgD,IAAS,CACRC,SAAS,kBACTC,MAAM,4BACNC,aAAc1B,EACd2B,cAAed,IAEjBvC,IAAAC,cAAA,SAAG,0CAEHD,IAAAC,cAAC3E,EAAO,CAACE,KAAMA,EAAME,OAAQ,IAAKD,MAAO,QCpBhC6H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK,SAAApI,GAAiD,IAA9CsI,EAAMtI,EAANsI,OAAQC,EAAMvI,EAANuI,OAAQC,EAAMxI,EAANwI,OAAQC,EAAMzI,EAANyI,OAAQC,EAAO1I,EAAP0I,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDtB,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrC,IAAAC,cAACD,IAAMsC,WAAU,KACftC,IAAAC,cAAC6C,EAAG,QAORQ","file":"static/js/main.d46d79be.chunk.js","sourcesContent":["import React  from 'react';\r\nimport { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default function Treemap({ data, width, height }) {\r\n  const svgRef = useRef(null);\r\n  const fontSize = 12;\r\n  const legendRef = useRef(null);\r\n\r\n  function wrapText(selection) {\r\n    selection.each(function () {\r\n      const node = d3.select(this);\r\n      const rectWidth = +node.attr('data-width');\r\n      let word;\r\n      const words = node.text().split(' ').reverse();\r\n      let line = [];\r\n      const x = node.attr('x');\r\n      const y = node.attr('y');\r\n      let tspan = node.text('').append('tspan').attr('x', x).attr('y', y);\r\n      let lineNumber = 0;\r\n      while (words.length > 1) {\r\n        word = words.pop();\r\n        line.push(word);\r\n        tspan.text(line.join(' '));\r\n        const tspanLength = tspan.node().getComputedTextLength();\r\n        if (tspanLength > rectWidth && line.length !== 1) {\r\n          line.pop();\r\n          tspan.text(line.join(' '));\r\n          line = [word];\r\n          tspan = addTspan(word);\r\n        }\r\n      }\r\n      \r\n      addTspan(words.pop());\r\n  \r\n      function addTspan(text) {\r\n        lineNumber += 1;\r\n        return (\r\n          node\r\n            .append('tspan')\r\n            .attr('x', x)\r\n            .attr('y', y)\r\n            .attr('dy', `${lineNumber * fontSize}px`)\r\n            .text(text)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderTreemap() {\r\n\r\n    // +++++++++++++++++++++++++++++++++\r\n    // cleanup nodes if left over from previous render\r\n    //\r\n    const svg = d3.select(svgRef.current);\r\n    var legendContainer = d3.select(legendRef.current);\r\n\r\n    svg.selectAll('g').remove();\r\n  \r\n    legendContainer = d3.select(legendRef.current);\r\n    legendContainer.selectAll('g').remove();\r\n    // +++++++++++++++++++++++++++++++++\r\n \r\n\r\n    svg.attr('width', width).attr('height', height);\r\n\r\n    const root = d3\r\n      .hierarchy(data)\r\n      .sum((d) => d.value)\r\n      .sort((a, b) => b.value - a.value);\r\n\r\n    const treemapRoot = d3.treemap().size([width, height]).padding(1)(root);\r\n\r\n    // on to the nodes...\r\n    // --------------------------------------\r\n    const nodes = svg\r\n      .selectAll('g')\r\n      .data(treemapRoot.leaves())\r\n      .join('g')\r\n      .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n    const fader = (color) => d3.interpolateRgb(color, '#fff')(0.3);\r\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10.map(fader));\r\n\r\n    // const fontSize = 12;\r\n\r\n    nodes\r\n      .append('rect')\r\n      .attr('width', (d) => d.x1 - d.x0)\r\n      .attr('height', (d) => d.y1 - d.y0)\r\n      .attr('fill', (d) => colorScale(d.data.category));\r\n      // ---------------------------------\r\n\r\n   \r\n  \r\n    nodes\r\n      .append('text')\r\n      .text((d) => `${d.data.name} ${d.data.value}`)\r\n      .attr('data-width', (d) => d.x1 - d.x0)\r\n      .attr('font-size', `${fontSize}px`)\r\n      .attr('x', 3)\r\n      .attr('y', fontSize)\r\n      .call(wrapText);\r\n  \r\n    console.log(treemapRoot.leaves())\r\n\r\n    // -----------------------------------------------\r\n    // legend code (we may not want to use legends at ISeaTree)\r\n    //\r\n    legendContainer = d3.select(legendRef.current);\r\n\r\n    let categories = root.leaves().map((node) => node.data.category);\r\n    \r\n    categories = categories.filter(\r\n      (category, index, self) => self.indexOf(category) === index,\r\n    );\r\n\r\n    legendContainer.attr('width', width).attr('height', height / 4);\r\n\r\n    const legend = legendContainer.selectAll('g').data(categories).join('g');\r\n\r\n    legend\r\n      .append('rect')\r\n      .attr('width', fontSize)\r\n      .attr('height', fontSize)\r\n      .attr('x', fontSize)\r\n      .attr('y', (_, i) => fontSize * 2 * i)\r\n      .attr('fill', (d) => colorScale(d));\r\n\r\n    legend\r\n      .append('text')\r\n      .attr('transform', `translate(0, ${fontSize})`)\r\n      .attr('x', fontSize * 3)\r\n      .attr('y', (_, i) => fontSize * 2 * i)\r\n      .style('font-size', fontSize)\r\n      .text((d) => d);\r\n\r\n      return (\r\n        <div>\r\n          <svg ref={svgRef} />\r\n          <svg ref={legendRef} />\r\n        </div>\r\n      );\r\n\r\n    // -----------------------------------------------\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    renderTreemap();\r\n  }, [data]);\r\n\r\n  \r\n  return (\r\n    <div>\r\n      <svg ref={svgRef} />\r\n      <svg ref={legendRef} />\r\n    </div>\r\n  );\r\n}","const data = {\r\n    name: 'States',\r\n    children: [\r\n      {\r\n        name: 'Texas',\r\n        children: [\r\n          {\r\n            category: 'Texas',\r\n            name: 'Silver Maple',\r\n            value: 20.4\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'ChinaBerry',\r\n            value: 12.9\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Oak',\r\n            value: 6.9\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Sugar Maple',\r\n            value: 3.6\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Juniper',\r\n            value: 3.3\r\n          },\r\n          {\r\n            category: 'Texas',\r\n            name: 'Trash',\r\n            value: 2.5\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        name: 'Oregon',\r\n        children: [\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Pine',\r\n            value: 23.4\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Laurel',\r\n            value: 20.3\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Mountain Laurel',\r\n            value: 17.5\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Juniper',\r\n            value: 6.4\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Family',\r\n            value: 7.4\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Shoe',\r\n            value: 3.4\r\n          },\r\n          {\r\n            category: 'Oregon',\r\n            name: 'Coconut',\r\n            value: 12.9\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        name: 'Hawaii',\r\n        children: [\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Coconut',\r\n            value: 9.2\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Willow',\r\n            value: 8.1\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'Redwood',\r\n            value: 5.2\r\n          },\r\n          {\r\n            category: 'Hawaii',\r\n            name: 'White Oak',\r\n            value: 3.3\r\n          },\r\n        ],\r\n      }\r\n    ]\r\n  };\r\n  \r\n  export default data;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CSVReader from \"react-csv-reader\";\r\n// import \"./styles.css\";\r\n// import { stash, unstash } from 'json-stash';\r\nimport {Link} from 'react-router-dom';\r\nimport Treemap from './Treemap';\r\n\r\nvar resulting_data = {};\r\n\r\n//\r\n// keys used in output tree structure\r\n//\r\nconst name_all = \"name\";\r\nconst children_all = \"children\";\r\nconst name_tree = \"name\";\r\nconst name_state = \"name\";\r\nconst children_state = \"children\";\r\nconst value_tree = \"value\";\r\n\r\n//\r\n// function to add data from a single tree to the output\r\n// tree structure in \"mystates\".  mystates is in a tree structure\r\n// format used the TreeMap in the D3 library.\r\n//\r\nfunction AddTree2(mystates, st, spec_c, spec_s, treetype) {\r\n\r\n  //\r\n  // some states input from the CSV file seem to be null.\r\n  // so ignore them.\r\n  //\r\n  if (st === null){\r\n    return false;\r\n  }\r\n\r\n  //\r\n  // treedict is the format of the leaf nodes in the output\r\n  // tree structure\r\n  var treedict = {\r\n    \"category\": st,\r\n    \"name\": spec_c,\r\n    // \"speciesnamescientific\": spec_s,\r\n    // \"treetype\": treetype,\r\n    \"value\" : 1\r\n  };\r\n\r\n  //\r\n  // statedict is the output format of the state nodes whose children\r\n  // are trees.\r\n  // \r\n  var statedict = {\r\n    namestate: st,\r\n    childrenstate: []\r\n  }\r\n\r\n  if (mystates.length === 0){\r\n    //\r\n    // only get here if there are no states yet in the output mystates.\r\n    mystates.push([]);\r\n    (mystates[0])[name_state] = st;\r\n    (mystates[0])[children_state] = [];\r\n    var treedict2 = {};\r\n    Object.assign(treedict2, treedict);\r\n    (mystates[0])[children_state].push(treedict2);\r\n    return true;\r\n  }\r\n  const n = mystates.length;\r\n  //\r\n  // lets iterate through the output so far to see if the\r\n  // if the tree being added is from a state that has already\r\n  // been added to the output\r\n  //\r\n  for (var i=0; i < n; i++) {\r\n    var sti = (mystates[i])[name_state];\r\n    if (sti != null){\r\n      if (sti === st){ \r\n        //\r\n        // state found\r\n        var trees = mystates[i][children_state];\r\n        if (trees === null || trees.length === 0)\r\n        {\r\n          // found state with no trees\r\n          // so add a treee to this state\r\n          //\r\n          mystates[i][children_state] = [];\r\n          var treedict3 = [];\r\n          //\r\n          // note: not sure of \"Object.assign\" is needed \r\n          // given the vagaries of pass by reference/value in javascript\r\n          // but this cant hurt.\r\n          Object.assign(treedict3, treedict);\r\n          mystates[i][children_state].push(treedict3);\r\n          return true;\r\n        }\r\n        //\r\n        // state with trees, so search for tree match\r\n        trees = mystates[i][children_state];\r\n        var m = trees.length;\r\n        for (var j = 0; j < m; j++){\r\n          var treej = trees[j];\r\n          if (treej != null && trees[j][\"name\"] === spec_c){\r\n            // tree found, so just increment count\r\n            trees[j][\"value\"] = trees[j][\"value\"] + 1;\r\n            return true;                  \r\n          }\r\n        }\r\n        // tree not found in existing state\r\n        // so add a tree\r\n        if (mystates[i][children_state] === null){\r\n          mystates[i][children_state] = [];\r\n        }        \r\n        var treedict4 = {};\r\n        Object.assign(treedict4, treedict);\r\n        mystates[i][children_state].push(treedict4);\r\n        return true;\r\n      }   \r\n    }\r\n  }\r\n  //\r\n  // state not found, add a new state and add one tree\r\n  //\r\n  mystates.push([]);\r\n  var mm = mystates.length;\r\n  mystates[mm-1][name_state] = st;\r\n  mystates[mm-1][children_state] = [];\r\n  var treedict5 = {};\r\n  Object.assign(treedict5, treedict);\r\n  mystates[mm-1][children_state].push(treedict5);\r\n  return true;\r\n}\r\n\r\n\r\n\r\nconst getdata = (data, fileInfo) => {\r\n  var ss = \"\";\r\n  // console.log(data, fileInfo);  \r\n  var mystates = [];\r\n  for ( var i = 0; i < data.length; i++ ) {\r\n    var st = data[i].stateabbr;\r\n    var species_c = data[i].speciesnamecommon;\r\n    var species_s = data[i].speciesnamescientific;\r\n    var treetype = data[i].treetype;\r\n    AddTree2(mystates, st, species_c, species_s, treetype);\r\n  }\r\n  console.log(ss);\r\n  // localStorage.setItem(\"ss\", ss);\r\n  // console.log(mystates);\r\n  var all = {};\r\n  all[name_all] = \"States\";\r\n  all[children_all] = mystates;\r\n  \r\n  resulting_data = all;\r\n  // var sAll = JSON.stringify(all);\r\n  // sessionStorage[\"all\"] = sAll;\r\n  // console.log(sessionStorage[\"all\"]);\r\n\r\n  // <Treemap data={data} height={400} width={600} />\r\n\r\n  // Note: following code rerenders the window with just the\r\n  // new TreeMap displayed with the data from the user selected\r\n  // CSV file.\r\n  // Note: this might not be the most elegant place \r\n  // for this code but saving the output tree structure in \r\n  // int things like session storage doesnt work for me yet.\r\n  // JSON.stringify() seems to have some problems with my \r\n  // output data that will be needed by TreeMap. So having\r\n  // the redisplay in a different page doesnt work yet.\r\n  //\r\n  const root = ReactDOM.createRoot(document.getElementById('root'));\r\n  root.render(\r\n    <React.StrictMode>\r\n      <Treemap data={all} height={400} width={600} />\r\n    </React.StrictMode>\r\n  );\r\n\r\n\r\n  return all;\r\n}\r\nconst papaparseOptions = {\r\n  header: true,\r\n  dynamicTyping: true,\r\n  skipEmptyLines: true,\r\n  transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\r\n};\r\n\r\n//const reader = (  \r\n//  <div className=\"container\">\r\n//    <script src=\"http://localhost:8097\"></script>\r\n//    <CSVReader\r\n//      cssClass=\"react-csv-input\"\r\n//      label=\"Select CSV with tree data\"\r\n//      onFileLoaded={handleForce}\r\n//      parserOptions={papaparseOptions}\r\n//    />\r\n//    <p>and then open the console</p>\r\n//    <Link to={{ pathname: \"/index\", state: resulting_data }}></Link>\r\n//  </div>\r\n//);\r\n\r\n// ReactDOM.render(reader, document.getElementById(\"root\")); \r\n\r\nexport default getdata;","import React  from 'react';\n// import logo from './logo.svg';\nimport Treemap from './Treemap';\nimport data from './data';\nimport data2 from './data2';\nimport getdata from './getdata3';\nimport CSVReader from 'react-csv-reader'\n// import './App.css';\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n};\n\nfunction App() { \n  // if (typeof(sessionStorage.getItem(\"all\"))!='undefined'){\n  //   dataToUse = sessionStorage[\"all\"];\n  // }\n  // dataToUse = data;\n  return (\n    <div className=\"App\"> \n      <script src=\"http://localhost:8097\"></script>\n      <CSVReader\n        cssClass=\"react-csv-input\"\n        label=\"Select CSV with tree data\"\n        onFileLoaded={getdata}\n        parserOptions={papaparseOptions}\n      />\n      <p>and then open the console if you like.</p>\n      \n      <Treemap data={data} height={400} width={600} />\n      \n    </div>\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}